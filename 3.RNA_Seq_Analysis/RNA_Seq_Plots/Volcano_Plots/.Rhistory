q()
require(readr)
require(tidyr)
require(gridExtra)
require(reshape2)
require(viridis)
require(ggplot2)
require(DESeq2)
require(biomaRt)
require(genefilter)
require(org.Hs.eg.db)
require(ComplexHeatmap)
require(clusterProfiler)
require(readr)
require(knitr)
# ===========================================
# Importing_Counts_Matrix
# ===========================================
# Set the random seed for reproducible results
set.seed(1234)
# Reading and preparing files:
# Using parametrized paths to read data. These default paths are for local rendering.
# When running through GitHub Actions, the paths will be provided by the workflow.
counts <- data.frame(read_tsv(params$data_path))
# Set the row names of the 'counts' data frame to be the first column (usually gene IDs or similar identifiers)
rownames(counts) <- counts[,1]
# Remove the first column since its information is now in row names
counts <- counts[,-1]
# Round the values in the 'counts' data frame to the nearest integer
# This may be important for some statistical analyses that require integer count data
counts <- round(counts)
# Check the number of missing values (NAs) in the 'counts' data frame
# 'which' returns the positions of NAs, and 'length' counts them
length(which(is.na(counts)))
# ===========================================
# Importing_Metadata
# ===========================================
# Read metadata from a tab-separated file "metadata.tsv" into a data frame:
# Using parametrized paths to read meta-data. These default paths are for local rendering.
# When running through GitHub Actions, the paths will be provided by the workflow.
metadata <- read_tsv(params$meta_path)
# Create a new column 'groups' in the metadata data frame.
metadata$groups <- ifelse(metadata$Response == "Progressive Disease" |
metadata$Response ==  "Stable Disease",
"NonResponder",
"Responder")
packageVersion("genefilter")


package_dependencies("genefilter", recursive=TRUE)$genefilter

library(genefilter)
packageDescription("genefilter")

package_dependencies("genefilter", recursive=TRUE)$genefilter

packageDescription("genefilter")$Depends

packageDescription("genefilter")$Imports

q()
